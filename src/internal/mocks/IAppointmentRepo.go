// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	model "github.com/mjmhtjain/enpal/src/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AppointmentRepo is an autogenerated mock type for the IAppointmentRepo type
type AppointmentRepo struct {
	mock.Mock
}

// FindSlots provides a mock function with given fields: startDate
func (_m *AppointmentRepo) FindSlots(startDate string) ([]model.Slot, error) {
	ret := _m.Called(startDate)

	if len(ret) == 0 {
		panic("no return value specified for FindSlots")
	}

	var r0 []model.Slot
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Slot, error)); ok {
		return rf(startDate)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Slot); ok {
		r0 = rf(startDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Slot)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(startDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppointmentRepo creates a new instance of AppointmentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppointmentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppointmentRepo {
	mock := &AppointmentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
